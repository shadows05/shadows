桥接模式将继承关系转换为关联关系，从而降低了类与类之间的耦合，减少了代码编写量

1) 抽象类(Abstraction):定义抽象类的接口,维护一个指向Implementor类型对象的指针
2) 扩充抽象类(RefinedAbstraction)：扩充由Abstraction定义的接口
3) 实现类接口(Implementor)：定义实现类的接口，该接口不一定要与Abstraction的接口完全一致；事实上这两个接口可以完全不同。一般来讲， Implementor接口仅提供基本操作，而 Abstraction则定义了基于这些基本操作的较高层次的操作。
4) 具体实现类(ConcreteImplementor)：实现Implementor接口并定义它的具体实现。


1）抽象工厂（Abstract
 Factory 模式可以用来创建和配置一个特定的Bridge模式。


2）Adapter模式
 用来帮助无关的类协同工作，它通常在系统设计完成后才会被使用。然而，Bridge模式则是在系统开始时就被使用，它使得抽象接口和实现部分可以独立进行改变。

3）桥接模式与装饰的区别:

    装饰模式:

    这两个模式在一定程度上都是为了减少子类的数目，避免出现复杂的继承关系。但是它们解决的方法却各有不同，装饰模式把子类中比基类中多出来的部分放到单独的类里面，以适应新功能增加的需要，当我们把描述新功能的类封装到基类的对象里面时，就得到了所需要的子类对象，这些描述新功能的类通过组合可以实现很多的功能组合
 .

    桥接模式：

    桥接模式则把原来的基类的实现化细节抽象出来，在构造到一个实现化的结构中，然后再把原来的基类改造成一